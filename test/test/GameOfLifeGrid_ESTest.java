/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 02:05:59 ART 2016
 */

package test;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import edu.unq.pconc.gameoflife.solution.GameOfLifeGrid;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class GameOfLifeGrid_ESTest extends GameOfLifeGrid_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.setThreads((-3154));
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.threads = 0;
      gameOfLifeGrid0.generaciones = 1011;
      gameOfLifeGrid0.clear();
      gameOfLifeGrid0.generaciones = 1;
      gameOfLifeGrid0.generaciones = (-1);
      int int0 = gameOfLifeGrid0.threads;
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.resize(0, 1);
      gameOfLifeGrid0.clear();
      boolean[][] booleanArray0 = new boolean[5][9];
      boolean[] booleanArray1 = new boolean[0];
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      booleanArray2[6] = true;
      booleanArray2[7] = false;
      booleanArray2[8] = false;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[5];
      booleanArray3[0] = false;
      booleanArray3[1] = true;
      booleanArray3[2] = false;
      booleanArray3[3] = true;
      booleanArray3[4] = false;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[8];
      booleanArray4[0] = false;
      booleanArray4[1] = false;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray4[5] = false;
      booleanArray4[6] = true;
      booleanArray4[7] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[0];
      booleanArray0[4] = booleanArray5;
      gameOfLifeGrid0.tableroAux = booleanArray0;
      
  }

  @Test
  public void test01()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.finalizaron = 0;
      gameOfLifeGrid0.resize(0, 0);
      gameOfLifeGrid0.columnas = (-1);
      boolean[][] booleanArray0 = new boolean[8][5];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[3];
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[4];
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[2];
      booleanArray4[0] = true;
      booleanArray4[1] = false;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[4];
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[3];
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray6[2] = true;
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[3];
      booleanArray7[0] = true;
      booleanArray7[1] = true;
      booleanArray7[2] = false;
      booleanArray0[6] = booleanArray7;
      boolean[] booleanArray8 = new boolean[2];
      booleanArray8[0] = false;
      booleanArray8[1] = true;
      booleanArray0[7] = booleanArray8;
      gameOfLifeGrid0.tablero = booleanArray0;
      int int0 = gameOfLifeGrid0.threads;
      gameOfLifeGrid0.generaciones = 0;
      gameOfLifeGrid0.generaciones = 0;
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.getCell(1, 0);
      gameOfLifeGrid0.workerTermino();
  }

  @Test
  public void test02()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      boolean[][] booleanArray0 = new boolean[6][9];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[1];
      booleanArray3[0] = false;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[4];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = false;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[9];
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[4] = false;
      booleanArray5[5] = false;
      booleanArray5[6] = true;
      booleanArray5[7] = true;
      booleanArray5[8] = false;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[0];
      booleanArray0[5] = booleanArray6;
      gameOfLifeGrid0.tablero = booleanArray0;
      gameOfLifeGrid0.getCell(0, 0);
  }

  @Test
  public void test03()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      boolean[][] booleanArray0 = new boolean[1][0];
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = false;
      gameOfLifeGrid0.tableroAux = booleanArray0;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray0[0] = booleanArray1;
      gameOfLifeGrid0.tableroAux = booleanArray0;
      gameOfLifeGrid0.resize(0, 1878);
      gameOfLifeGrid0.clear();
      gameOfLifeGrid0.threads = 0;
  }

  @Test
  public void test04()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      boolean[][] booleanArray0 = new boolean[9][5];
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[0];
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[8];
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      booleanArray3[2] = true;
      booleanArray3[3] = false;
      booleanArray3[4] = false;
      booleanArray3[5] = false;
      booleanArray3[6] = false;
      booleanArray3[7] = false;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[8];
      booleanArray4[0] = false;
      booleanArray4[1] = false;
      booleanArray4[2] = false;
      booleanArray4[3] = false;
      booleanArray4[4] = false;
      booleanArray4[5] = false;
      booleanArray4[6] = false;
      booleanArray4[7] = false;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[2];
      booleanArray5[0] = false;
      booleanArray5[1] = false;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[6];
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray6[2] = false;
      booleanArray6[3] = true;
      booleanArray6[4] = true;
      booleanArray6[5] = false;
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[8];
      booleanArray7[0] = false;
      booleanArray7[1] = false;
      booleanArray7[2] = false;
      booleanArray7[3] = true;
      booleanArray7[4] = true;
      booleanArray7[5] = false;
      booleanArray7[6] = false;
      booleanArray7[7] = false;
      booleanArray0[6] = booleanArray7;
      boolean[] booleanArray8 = new boolean[5];
      booleanArray8[0] = false;
      booleanArray8[1] = true;
      booleanArray8[2] = false;
      booleanArray8[3] = true;
      booleanArray8[4] = false;
      booleanArray0[7] = booleanArray8;
      boolean[] booleanArray9 = new boolean[8];
      booleanArray9[0] = true;
      booleanArray9[1] = false;
      booleanArray9[2] = true;
      booleanArray9[3] = false;
      booleanArray9[4] = false;
      booleanArray9[5] = false;
      booleanArray9[6] = false;
      booleanArray9[7] = false;
      booleanArray0[8] = booleanArray9;
      gameOfLifeGrid0.tablero = booleanArray0;
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.getCell(0, 0);
      gameOfLifeGrid0.columnas = 0;
      gameOfLifeGrid0.generaciones = 0;
      int int0 = gameOfLifeGrid0.filas;
      boolean[][] booleanArray10 = null;
      try {  
      booleanArray10 = gameOfLifeGrid0.tableroAux;
      } catch(NullPointerException e) {}
  }

  @Test
  public void test05()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.setThreads(0);
      boolean[][] booleanArray0 = new boolean[7][2];
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[4];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[5];
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray3[4] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[4];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[3];
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[7];
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray6[2] = false;
      booleanArray6[3] = true;
      booleanArray6[4] = true;
      booleanArray6[5] = true;
      booleanArray6[6] = false;
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[9];
      booleanArray7[0] = true;
      booleanArray7[1] = false;
      booleanArray7[2] = true;
      booleanArray7[3] = true;
      booleanArray7[4] = false;
      booleanArray7[5] = true;
      booleanArray7[6] = false;
      booleanArray7[7] = false;
      booleanArray7[8] = false;
      booleanArray0[6] = booleanArray7;
      gameOfLifeGrid0.tablero = booleanArray0;
      gameOfLifeGrid0.filas = (-1);
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.clear();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.getCell((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.resize(0, 1);
      gameOfLifeGrid0.filas = 1652;
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.next();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.filas = (-3754);
      gameOfLifeGrid0.getDimension();
      boolean[][] booleanArray0 = new boolean[9][2];
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = false;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[9];
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      booleanArray3[2] = false;
      booleanArray3[3] = false;
      booleanArray3[4] = false;
      booleanArray3[5] = false;
      booleanArray3[6] = false;
      booleanArray3[7] = false;
      booleanArray3[8] = false;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[2];
      booleanArray4[0] = false;
      booleanArray4[1] = false;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[9];
      booleanArray5[0] = false;
      booleanArray5[1] = false;
      booleanArray5[2] = false;
      booleanArray5[3] = false;
      booleanArray5[4] = false;
      booleanArray5[5] = true;
      booleanArray5[6] = false;
      booleanArray5[7] = false;
      booleanArray5[8] = false;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[5];
      booleanArray6[0] = false;
      booleanArray6[1] = false;
      booleanArray6[2] = false;
      booleanArray6[3] = true;
      booleanArray6[4] = true;
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[7];
      booleanArray7[0] = false;
      booleanArray7[1] = false;
      booleanArray7[2] = true;
      booleanArray7[3] = false;
      booleanArray7[4] = false;
      booleanArray7[5] = true;
      booleanArray7[6] = true;
      booleanArray0[6] = booleanArray7;
      boolean[] booleanArray8 = new boolean[9];
      booleanArray8[0] = false;
      booleanArray8[1] = false;
      booleanArray8[2] = false;
      booleanArray8[3] = true;
      booleanArray8[4] = false;
      booleanArray8[5] = false;
      booleanArray8[6] = false;
      booleanArray8[7] = false;
      booleanArray8[8] = true;
      booleanArray0[7] = booleanArray8;
      boolean[] booleanArray9 = new boolean[8];
      booleanArray9[0] = false;
      booleanArray9[1] = false;
      booleanArray9[2] = false;
      booleanArray9[3] = false;
      booleanArray9[4] = false;
      booleanArray9[5] = false;
      booleanArray9[6] = false;
      booleanArray9[7] = false;
      booleanArray0[8] = booleanArray9;
      gameOfLifeGrid0.tablero = booleanArray0;
      gameOfLifeGrid0.resize(1795, 1795);
  }

  @Test
  public void test08()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.clear();
      assertEquals(0, gameOfLifeGrid0.getGenerations());
      
      boolean[][] booleanArray0 = new boolean[1][9];
      boolean[] booleanArray1 = new boolean[4];
      gameOfLifeGrid0.finalizaron = 1;
      gameOfLifeGrid0.setThreads(1307);
      gameOfLifeGrid0.generaciones = 0;
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      boolean[][] booleanArray2 = new boolean[2][5];
      booleanArray2[0] = booleanArray1;
      booleanArray2[1] = booleanArray1;
      gameOfLifeGrid0.tablero = booleanArray2;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray0[0] = booleanArray1;
      gameOfLifeGrid0.tableroAux = booleanArray0;
      gameOfLifeGrid0.filas = 0;
      int int0 = gameOfLifeGrid0.threads;
      gameOfLifeGrid0.setThreads(1307);
      boolean[][] booleanArray3 = gameOfLifeGrid0.tablero;
      gameOfLifeGrid0.resize(1307, 1481);
      gameOfLifeGrid0.filas = 1307;
  }

  @Test
  public void test09()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.columnas = (-2030);
      gameOfLifeGrid0.filas = (-2030);
      gameOfLifeGrid0.filas = (-2585);
      gameOfLifeGrid0.filas = (-2030);
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.next();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      boolean[][] booleanArray0 = new boolean[9][3];
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[9];
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray3[4] = false;
      booleanArray3[5] = true;
      booleanArray3[6] = true;
      booleanArray3[7] = true;
      booleanArray3[8] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[9];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = false;
      booleanArray4[3] = true;
      booleanArray4[4] = false;
      booleanArray4[5] = false;
      booleanArray4[6] = true;
      booleanArray4[7] = false;
      booleanArray4[8] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[3];
      booleanArray5[0] = true;
      booleanArray5[1] = false;
      booleanArray5[2] = true;
      booleanArray0[4] = booleanArray5;
      boolean[] booleanArray6 = new boolean[9];
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray6[2] = true;
      booleanArray6[3] = true;
      booleanArray6[4] = true;
      booleanArray6[5] = true;
      booleanArray6[6] = true;
      booleanArray6[7] = true;
      booleanArray6[8] = true;
      booleanArray0[5] = booleanArray6;
      boolean[] booleanArray7 = new boolean[2];
      booleanArray7[0] = true;
      booleanArray7[1] = true;
      booleanArray0[6] = booleanArray7;
      boolean[] booleanArray8 = new boolean[7];
      booleanArray8[0] = false;
      booleanArray8[1] = true;
      booleanArray8[2] = false;
      booleanArray8[3] = true;
      booleanArray8[4] = true;
      booleanArray8[5] = false;
      booleanArray8[6] = false;
      booleanArray0[7] = booleanArray8;
      boolean[] booleanArray9 = new boolean[2];
      booleanArray9[0] = true;
      booleanArray9[1] = false;
      booleanArray0[8] = booleanArray9;
      gameOfLifeGrid0.tablero = booleanArray0;
      gameOfLifeGrid0.getGenerations();
      gameOfLifeGrid0.generaciones = 0;
      gameOfLifeGrid0.columnas = (-5981);
      gameOfLifeGrid0.resize(0, 257);
      gameOfLifeGrid0.generaciones = 0;
      gameOfLifeGrid0.columnas = (-5981);
  }

  @Test
  public void test11()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      boolean[][] booleanArray0 = new boolean[2][7];
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = true;
      booleanArray0[1] = booleanArray2;
      gameOfLifeGrid0.tablero = booleanArray0;
      gameOfLifeGrid0.resize(0, 1);
      gameOfLifeGrid0.filas = 0;
  }

  @Test
  public void test12()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.setThreads(0);
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.finalizaron = 0;
      gameOfLifeGrid0.generaciones = (-1466);
      gameOfLifeGrid0.generaciones = (-1466);
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.resize(0, 0);
      gameOfLifeGrid0.finalizaron = 2056;
      int int0 = gameOfLifeGrid0.generaciones;
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.next();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.filas = (-1030);
      gameOfLifeGrid0.clear();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.setCell((-1030), (-1030), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      int int0 = gameOfLifeGrid0.filas;
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.finalizaron = 4276;
      gameOfLifeGrid0.getDimension();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.getCell(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.setThreads(1);
      gameOfLifeGrid0.next();
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.setThreads(601);
      boolean[][] booleanArray0 = gameOfLifeGrid0.tableroAux;
      gameOfLifeGrid0.getGenerations();
      gameOfLifeGrid0.filas = 1077;
      gameOfLifeGrid0.setThreads(219);
  }

  @Test
  public void test16()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.finalizaron = 0;
      gameOfLifeGrid0.resize(0, 0);
      boolean[][] booleanArray0 = new boolean[0][9];
      gameOfLifeGrid0.tablero = booleanArray0;
      gameOfLifeGrid0.filas = 0;
      int int0 = gameOfLifeGrid0.generaciones;
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.setCell(0, 0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.resize(0, 0);
      gameOfLifeGrid0.finalizaron = 0;
      gameOfLifeGrid0.setThreads(0);
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.filas = 0;
      gameOfLifeGrid0.columnas = (-704);
      gameOfLifeGrid0.resize(0, 0);
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.getDimension();
      int int0 = gameOfLifeGrid0.finalizaron;
      gameOfLifeGrid0.getDimension();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.next();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.resize(0, 0);
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.threads = 1779;
      gameOfLifeGrid0.workerTermino();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.getCell(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.getCell((-1516), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test20()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.threads = (-395);
      gameOfLifeGrid0.threads = (-395);
      gameOfLifeGrid0.next();
      gameOfLifeGrid0.columnas = (-395);
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.getCell((-395), (-395));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test21()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.setCell(371, 371, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test22()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      boolean[][] booleanArray0 = new boolean[1][9];
      boolean[] booleanArray1 = new boolean[0];
      booleanArray0[0] = booleanArray1;
      gameOfLifeGrid0.tablero = booleanArray0;
      gameOfLifeGrid0.clear();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.resize((-1030), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test23()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.resize(664, 0);
      gameOfLifeGrid0.generaciones = 664;
      gameOfLifeGrid0.getDimension();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.next();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test24()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.generaciones = (-1);
      int int0 = gameOfLifeGrid0.generaciones;
      gameOfLifeGrid0.finalizaron = (-1);
      gameOfLifeGrid0.getGenerations();
      gameOfLifeGrid0.setThreads((-1));
      gameOfLifeGrid0.finalizaron = (-2712);
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.resize(0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test25()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.clear();
      gameOfLifeGrid0.clear();
      boolean[][] booleanArray0 = new boolean[5][1];
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[8];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = true;
      booleanArray2[5] = false;
      booleanArray2[6] = false;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[4];
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      booleanArray3[2] = false;
      booleanArray3[3] = true;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[5];
      booleanArray4[0] = false;
      booleanArray4[1] = false;
      booleanArray4[2] = false;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray0[3] = booleanArray4;
      boolean[] booleanArray5 = new boolean[1];
      booleanArray5[0] = true;
      booleanArray0[4] = booleanArray5;
      gameOfLifeGrid0.tableroAux = booleanArray0;
      gameOfLifeGrid0.threads = 1;
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.resize(2448, 2448);
      gameOfLifeGrid0.columnas = 1;
      boolean[][] booleanArray6 = gameOfLifeGrid0.tablero;
      int int0 = gameOfLifeGrid0.columnas;
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.getGenerations();
  }

  @Test
  public void test26()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.setThreads(3290);
      GameOfLifeGrid gameOfLifeGrid1 = new GameOfLifeGrid();
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.filas = 0;
      GameOfLifeGrid gameOfLifeGrid2 = new GameOfLifeGrid();
      gameOfLifeGrid2.setThreads((-315));
      gameOfLifeGrid1.columnas = (-315);
      boolean[][] booleanArray0 = new boolean[0][7];
      gameOfLifeGrid2.generaciones = 0;
      gameOfLifeGrid0.next();
      gameOfLifeGrid1.getDimension();
      gameOfLifeGrid0.tableroAux = booleanArray0;
      int int0 = gameOfLifeGrid1.generaciones;
      GameOfLifeGrid gameOfLifeGrid3 = new GameOfLifeGrid();
      gameOfLifeGrid3.workerTermino();
      gameOfLifeGrid3.getDimension();
      gameOfLifeGrid3.getGenerations();
      gameOfLifeGrid2.columnas = 0;
      gameOfLifeGrid2.setThreads(261);
      assertFalse(gameOfLifeGrid2.equals((Object)gameOfLifeGrid3));
  }

  @Test
  public void test27()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      int int0 = gameOfLifeGrid0.filas;
      int int1 = 4276;
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.finalizaron = 4276;
      gameOfLifeGrid0.getDimension();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.getCell(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test28()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.getDimension();
      boolean[][] booleanArray0 = new boolean[4][7];
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[3];
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[9];
      booleanArray3[0] = true;
      booleanArray3[1] = false;
      booleanArray3[2] = false;
      booleanArray3[3] = false;
      booleanArray3[4] = true;
      booleanArray3[5] = true;
      booleanArray3[6] = true;
      booleanArray3[7] = false;
      booleanArray3[8] = false;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[9];
      booleanArray4[0] = true;
      booleanArray4[1] = false;
      booleanArray4[2] = false;
      booleanArray4[3] = false;
      booleanArray4[4] = true;
      booleanArray4[5] = true;
      booleanArray4[6] = true;
      booleanArray4[7] = false;
      booleanArray4[8] = true;
      booleanArray0[3] = booleanArray4;
      gameOfLifeGrid0.tableroAux = booleanArray0;
      gameOfLifeGrid0.resize(0, 1);
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.clear();
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.next();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test29()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.finalizaron = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.setCell((-1), 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test30()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.filas = 2878;
      int int0 = 2182;
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.getCell(2182, 2182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.unq.pconc.gameoflife.solution.GameOfLifeGrid", e);
      }
  }

  @Test
  public void test31()  throws Throwable  {
      GameOfLifeGrid gameOfLifeGrid0 = new GameOfLifeGrid();
      gameOfLifeGrid0.filas = 1396;
      gameOfLifeGrid0.workerTermino();
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.getDimension();
      gameOfLifeGrid0.columnas = 785;
      int int0 = gameOfLifeGrid0.generaciones;
      GameOfLifeGrid gameOfLifeGrid1 = new GameOfLifeGrid();
      gameOfLifeGrid1.finalizaron = 1396;
      gameOfLifeGrid1.filas = 0;
      // Undeclared exception!
      try { 
        gameOfLifeGrid0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
  
  
  @Test
  public void testEvolucionar(){
	  GameOfLifeGrid gof = new GameOfLifeGrid();
	  gof.resize(4,4);
	  gof.resize(5,5);
	  gof.setCell(0, 0, true);
	  gof.setCell(1, 0, true);
	  gof.setCell(2, 0, true);
	  gof.setThreads(2);
	  gof.next();
	  
	 
	  assertTrue(gof.generaciones == 1);
	  assertTrue(gof.columnas == 5);
	  assertTrue(gof.filas == 5);
	  
	  gof.clear();
	  
	  assertTrue(gof.generaciones == 0);
	  
	  
	 
	}
}
